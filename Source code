def code_idk():
    #IN VDO
    from mpl_toolkits import mplot3d  #to get inline
    #%matplotlib inline
    import matplotlib.pyplot as plt
    fig = plt.figure()
    axes = plt.axes(projection='3d')
    print(fig, axes)


    #The linspace() function returns evenly spaced numbers over a specified interval [start, stop, total no to be generated]
    #for line in graph
    import numpy as np
    zline = np.linspace(0,15,1000)
    yline = np.sin(zline)
    xline = np.cos(zline)
    axes.plot3D(xline,yline,zline,"gray")
    #for scattered points in graph
    zdata = 15*np.random.randn(1,100)
    xdata = np.cos(zdata) + 0.1*np.random.randn(100)  #-->since we gave cos for x above to get points nearly to that x line
    ydata = np.sin(zdata) +0.1*np.random.randn(100)   #-->since we gave cos for x above to get points nearly to that y line
    axes.scatter3D(xdata, ydata, zdata,"blue")


#normal 3d plot
!pip install matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
fig = plt.figure()
ax = plt.axes(projection='3d')


#for line ---> ax.plot3D(x,y,z)
ax = plt.axes(projection='3d') #required line for the showing of graph
!pip install numpy
import numpy as np
zline = np.linspace(0,15,1000)
yline = np.sin(zline)
xline = np.cos(zline)
ax.plot3D(xline,yline,zline,'green')


#for line + point ---> ax.plot3D(x,y,z)  &  ax.scatter3D(X,Y,Z)
ax = plt.axes(projection='3d') #{required line for the showing of graph}
!pip install numpy
import numpy as np
zline = np.linspace(0,15,1000)
yline = np.sin(zline)
xline = np.cos(zline)
ax.plot3D(xline,yline,zline,'green')
zdata = np.linspace(0,15,100)
ydata = np.sin(zdata) + 0.1*np.random.randn(100)
xdata = np.cos(zdata) + 0.1*np.random.randn(100)
ax.scatter3D(xdata,ydata,zdata, 'gray')
#or.......................................................
ax = plt.axes(projection='3d')
zdata = np.random.randn(100)
xdata = 0.1*np.cos(zdata) + np.random.randint(100)
ydata = 0.1*np.sin(zdata) + np.random.randint(100)
ax.scatter3D(xdata, ydata, zdata, cmap = 'Green')
zline = np.linspace(1,10,100)
xline = np.cos(zline)
yline = np.sin(zline)
ax.plot3D(xline, yline, zline,'gray')


#for trisurface plots -----> ax.contour3D(X,Y,Z)
#trisurface A
ax = plt.axes(projection='3d')
!pip install numpy
import numpy as np
def func(m,n):
  import numpy as np
  a = np.sin(np.sqrt(m**2+n**2))
  return a
x = np.linspace(-6,6,30)
y = np.linspace(-6,6,30)
X,Y = np.meshgrid(x,y)
Z = func(X,Y)
fig = plt.figure()
ax.contour3D(X,Y,Z,100, cmap='binary') # 'cmap' = for color change {example of LineSpec}
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')


#trisurface B with rotation
ax = plt.axes(projection='3d')
x = np.linspace(-10,10,10)
y = np.linspace(-10,10,10)
X, Y = np.meshgrid(x,y)
Z = np.sin(X) + np.cos(Y)
ax.contour3D(X,Y,Z,50,cmap='viridis')
ax.view_init(60,35) #60-rotated w.r.t x and y       &         35-rotated w.r.t z



#for surface triangulation ---> ax.plot_trisurf(x,y,z)
ax = plt.axes(projection='3d')
r = np.random.randn(100)
t = np.random.randn(100)
x = np.ravel(r*np.sin(t))
y = np.ravel(r*np.cos(t))
z = func(x,y)
ax.plot_trisurf(x,y,z,cmap='viridis')
